								Project<code_stream>

Description:
	codestream is a simple tool to code data from stream.It supports the options -k (key) -e (encode) -d (decode) -h (get help messages).
	The general usage is like to the example :
	    e.g.
		prompt> cat <file> | codestream
	It would reads data from standard input stream and writes data which was coded to standard output stream.
	# EOF will cause stop coding.
	
Design reason:
       I want have a tool to code file to other format that i can custom.

Structure:
	Define a C++ abstract class named Codestream.
	Codestream::_code_procedures	  - A std::vector object which contains code procedures.
				    	  - Codestream' main procedure would use these procedure to operates data by an order was assigned.
	Codestream::_cp_end		  - Index of end point for _code_procedures.

	Codestream::_codestream_flag	  - std::bitset object.It has three bit [INIT, OP_ORDER, STOPPED]

	Codestream::_ip		     	  - Record next position of procedures chain.
	Codestream::_ip_mutex	     	  - Must lock this mutex before access _ip member.
	Codestream::_ip_mutex_unique	  - RTTI wrapper.
	Codestream::_ip_end	     	  - End point of procedures chain.

	Codestream::_last_op_ret     	  - Save last operation return.
	
	Codestream::_state		  - Codestream status.
	Codestream::_state_mutex	  - Saver of _state.

	Codestream::startCode()	     	  - Start coding.
	Codestream::stopCode()	     	  - Stop coding.
	Codestream::restartCode()    	  - Restart coding from breakpoint.
	Codestream::installProcedure()    - Install a procedure into _code_procedures.
					  - /* this function has overload version for install at an assigned position */

	Codestream::uninstallProcedure()  - Uninstall a procedure from _code_procedures.
	Codestream::getProgress()	  - Return _ip,require _ip_mutext.
	Codestream::getLastResult()	  - Return _last_op_ret,require _ip_mutex.
	Codestream::getOpChainSize() 	  - Return _cp_end.
	Codestream::processStateExplain() - Return a C++ string to explain what happen now.
	Codestream::triggerOpOrder()	  - A trigger to change _ip increase direction.increase


	enum {
	     INIT = 0,
	     OP_ORDER,
	     STOPPED,
	     CODESTREAM_FLAG_TOTAL
	};

	enum codestream_process_state {
	     INVALID,
	     NOERROR,
	     NOINIT,
	     IN_PROGRESSING,
	     SHUTDOWN,
	     UNINSTALL_FAILED,
	     SUSPEND,
	     NOT_SUSPEND
	};

	struct op_arg_ret {
	       void 	  *b1;		/* b1 should point to a buffer which would contains src data */
	       size_t	  b1_size;	/* b1_size is the size of data in b1 */
	       void	  *b2;		/* b2 should point to a buffer which would contains des data */
	       size_t	  b2_size;	/* b2_size is the size of data in b2 */
	};
					/* at calling time,b1_size should be the length of data in *b1 */
					/* at calling time,b2_size should be the length of *b2 */

	// the time to call installProcedure() must lock the _ip_mutext, call uninstallProcedure() is alike to that.

Logic order:
	user execute binary file with properly command sequence.
	program create Codestream class.
	set environment.
	start coding.
	shutdown after EOF was received.
	exit.

Feature design:
	-k <num>
		set key for coding.

	-e
		receive data from input stream and coding,output result to output stream.
	
	-d
		receive data from input stream and decoding,output result to output stream.

	-h
		print help messages.

Develop environment:
	gcc 10.3.0
	Linux 3.10
	glibc 2.17
	CentOS 7
	C++ 20

Debug or Other:
	TODO:
	<Debug and TODO.All programs are not probably no bugs.And they are also have the space to optimize.>

Complement:
	<There could place some messages as additional.Addition could explain the project in the further gradation.>

Version:
	v0.01
